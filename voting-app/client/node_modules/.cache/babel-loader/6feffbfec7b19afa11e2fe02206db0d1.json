{"ast":null,"code":"import _slicedToArray from \"/home/tomas/Voting app (2)/voting-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/tomas/Voting app (2)/voting-app/client/src/components/candidates/candidates.js\";\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable react/no-direct-mutation-state */\n\n/* eslint-disable no-undef */\n\n/* eslint-disable no-unused-expressions */\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ReactTable from 'react-table';\nimport ReactFileReader from 'react-file-reader';\nimport CSVReader from \"react-csv-reader\";\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport { confirm } from \"../confirmation/confirmation\";\nimport axios from 'axios';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport 'react-table/react-table.css';\nimport 'react-notifications/lib/notifications.css';\n\nconst _require = require('paillier-in-set-zkp'),\n      encryptWithProof = _require.encryptWithProof;\n\nconst paillier = require('paillier-js');\n\nvar bigInt = require(\"big-integer\");\n\nclass Candidates extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnClickVote = () => {\n      if (this.state.vote == null) {\n        NotificationManager.error('Choose one candidate!', 'Your vote is empty');\n        return;\n      }\n\n      confirm('Are you sure vote - ' + this.state.voteName + '?').then(() => {\n        var validScores = this.state.candidates.map(function (obj) {\n          return obj.Record.Vote;\n        });\n        console.log(validScores);\n        console.time('encrypt');\n        const publicKey = new paillier.PublicKey(bigInt(this.state.pubKey.n), this.state.pubKey.g);\n\n        const _encryptWithProof = encryptWithProof(publicKey, this.state.vote, validScores, this.state.bits),\n              _encryptWithProof2 = _slicedToArray(_encryptWithProof, 3),\n              cipher = _encryptWithProof2[0],\n              proof = _encryptWithProof2[1],\n              random = _encryptWithProof2[2];\n\n        console.log(\"Cipher: \" + cipher);\n        console.log(\"Proof:\" + proof);\n        console.log(\"Random:\" + random);\n        this.setState({\n          random: random.toString()\n        });\n        this.state.random = random.toString();\n        console.timeEnd('encrypt');\n        var vote = {\n          id: '1',\n          Vote: parseInt(this.state.vote),\n          Cipher: cipher,\n          Proof: proof\n        };\n        console.log(this.state.voteName);\n        axios.post('/voting-app/vote', vote).then(response => {\n          console.log(response);\n        }).catch(error => {\n          console.log(error);\n          NotificationManager.error('Your vote is not counted :-(', 'ERROR!');\n        });\n        this.setState({\n          isFinish: true\n        });\n        NotificationManager.success('Your vote is counted :-)', 'SUCCESS!');\n      });\n    };\n\n    this.handleForce = data => {\n      console.log(data);\n    };\n\n    this.state = {\n      pubKey: [],\n      candidates: [],\n      vote: null,\n      voteName: '',\n      bits: null,\n      random: '',\n      isFinish: false\n    };\n    this.handleOnClickVote = this.handleOnClickVote.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('/voting-app/candidates/', {\n      method: \"GET\"\n    }).then(res => res.json()).then(candidates => this.setState({\n      candidates\n    }, () => console.log('Candidates fetched..', candidates)));\n    fetch('/voting-app/getPubKey/', {\n      method: \"GET\"\n    }).then(res => res.json()).then(pubKey => this.setState({\n      pubKey\n    }, () => console.log('Public Key fetched..', pubKey)));\n    fetch('/voting-app/getBits/', {\n      method: \"GET\"\n    }).then(res => res.json()).then(bits => this.setState({\n      bits\n    }, () => console.log('Number of bits fetched..', bits)));\n  }\n\n  onClickHandler() {}\n\n  render() {\n    const columns = [{\n      Header: \"Vote\",\n      style: {\n        textAlign: \"center\"\n      },\n      Cell: props => {\n        return React.createElement(\"div\", {\n          class: \"radio\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"radio\",\n          name: \"optradio\",\n          onClick: () => {\n            this.state.vote = props.original.Record.Vote;\n            this.state.voteName = props.original.Record.Name;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        })));\n      },\n      sortable: false,\n      width: 100,\n      maxWidth: 100,\n      minWidth: 100\n    }, {\n      Header: \"ID\",\n      accessor: \"Record.ID\",\n      style: {\n        textAlign: \"center\"\n      },\n      width: 75,\n      maxWidth: 75,\n      minWidth: 75\n    }, {\n      Header: \"Name\",\n      accessor: \"Record.Name\",\n      style: {\n        textAlign: \"center\"\n      }\n    }, {\n      Header: \"Party\",\n      accessor: \"Record.Description\",\n      style: {\n        textAlign: \"center\"\n      },\n      filterable: false\n    }, {\n      Header: \"Age\",\n      accessor: \"Record.Age\",\n      style: {\n        textAlign: \"center\"\n      },\n      filterable: false\n    }];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(ReactTable, {\n      className: \"-striped -highlight\",\n      defaultPageSize: 5,\n      minRows: 1,\n      columns: columns,\n      data: this.state.candidates,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }), React.createElement(CSVReader, {\n      cssInputClass: \"btn btn-primary\",\n      label: \"Select CSV with secret Death Star statistics\",\n      onFileLoaded: this.handleForce,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"success\",\n      onClick: this.handleOnClickVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Vote\"), this.state.isFinish && React.createElement(CSVLink, {\n      data: this.state.random,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Download your rand key.\"), React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Candidates;","map":{"version":3,"sources":["/home/tomas/Voting app (2)/voting-app/client/src/components/candidates/candidates.js"],"names":["React","Component","Button","ReactTable","ReactFileReader","CSVReader","NotificationContainer","NotificationManager","confirm","axios","CSVLink","CSVDownload","require","encryptWithProof","paillier","bigInt","Candidates","constructor","props","handleOnClickVote","state","vote","error","voteName","then","validScores","candidates","map","obj","Record","Vote","console","log","time","publicKey","PublicKey","pubKey","n","g","bits","cipher","proof","random","setState","toString","timeEnd","id","parseInt","Cipher","Proof","post","response","catch","isFinish","success","handleForce","data","bind","componentDidMount","fetch","method","res","json","onClickHandler","render","columns","Header","style","textAlign","Cell","original","Name","sortable","width","maxWidth","minWidth","accessor","filterable"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable react/no-direct-mutation-state */\n/* eslint-disable no-undef */\n/* eslint-disable no-unused-expressions */\nimport React, {Component} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ReactTable from 'react-table';\nimport ReactFileReader from 'react-file-reader';\nimport CSVReader from \"react-csv-reader\";\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\nimport {confirm} from \"../confirmation/confirmation\";\nimport axios from 'axios';\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport 'react-table/react-table.css';\nimport 'react-notifications/lib/notifications.css';\n\nconst { encryptWithProof} = require('paillier-in-set-zkp')\nconst paillier = require('paillier-js')\nvar bigInt = require(\"big-integer\");\n\nclass Candidates extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            pubKey: [],\n            candidates: [],\n            vote: null,\n            voteName: '',\n            bits: null,\n            random: '',\n            isFinish: false,\n        }\n        this.handleOnClickVote = this.handleOnClickVote.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('/voting-app/candidates/',{\n            method: \"GET\"})\n            .then(res => res.json())\n            .then(candidates => this.setState({candidates}, () => console.log('Candidates fetched..',\n            candidates)));\n        fetch('/voting-app/getPubKey/',{\n            method: \"GET\"})\n            .then(res => res.json())\n            .then(pubKey => this.setState({pubKey}, () => console.log('Public Key fetched..',\n            pubKey)));\n        fetch('/voting-app/getBits/',{\n            method: \"GET\"})\n            .then(res => res.json())\n            .then(bits => this.setState({bits}, () => console.log('Number of bits fetched..',\n            bits)));\n        \n    }\n\n    handleOnClickVote = () => {\n        \n        if(this.state.vote == null){\n            NotificationManager.error('Choose one candidate!', 'Your vote is empty');\n            return;\n        }\n\n        confirm('Are you sure vote - ' + this.state.voteName + '?').then(\n            () => {\n                var validScores = this.state.candidates.map(function (obj) {\n                    return obj.Record.Vote;\n                });\n                console.log(validScores);\n                console.time('encrypt');\n        \n                const publicKey = new paillier.PublicKey(bigInt(this.state.pubKey.n), this.state.pubKey.g);\n                \n                const [cipher, proof, random] = encryptWithProof(publicKey, this.state.vote, validScores, this.state.bits);\n                console.log(\"Cipher: \" + cipher);\n                console.log(\"Proof:\" + proof);\n                console.log(\"Random:\" + random);\n                this.setState({random: random.toString()});\n                this.state.random = random.toString();\n                console.timeEnd('encrypt');\n                var vote = {\n                    id: '1',\n                    Vote: parseInt(this.state.vote),\n                    Cipher: cipher,\n                    Proof: proof \n                }\n                console.log(this.state.voteName);\n        \n                axios.post('/voting-app/vote', vote)\n                    .then(response => {\n                        console.log(response);\n                    })\n                    .catch(error => {\n                        console.log(error);\n                        NotificationManager.error('Your vote is not counted :-(', 'ERROR!');\n                    })\n                this.setState({isFinish: true});\n                NotificationManager.success('Your vote is counted :-)', 'SUCCESS!');\n            }\n          );\n    }\n\n    handleForce = data => {\n        console.log(data);\n    };\n    onClickHandler(){\n\n    }\n\n    render(){\n        const columns = [\n            {\n                Header: \"Vote\",\n                style:{\n                    textAlign: \"center\"\n                },\n                Cell: props =>{\n                    return(\n                        <div class=\"radio\">\n                            <label><input type=\"radio\" name=\"optradio\"\n                                onClick={() =>{\n                                    this.state.vote = props.original.Record.Vote;\n                                    this.state.voteName = props.original.Record.Name;\n                                }}\n                            /></label>\n                        </div>\n                    )\n                },\n                sortable: false,\n                width: 100,\n                maxWidth:100,\n                minWidth:100\n            },\n            {\n                Header: \"ID\",\n                accessor: \"Record.ID\",\n                style:{\n                    textAlign: \"center\"  \n                },\n                width: 75,\n                maxWidth: 75,\n                minWidth: 75\n            },\n            {\n                Header: \"Name\",\n                accessor: \"Record.Name\",\n                style:{\n                    textAlign: \"center\"  \n                }\n                \n            },\n            {\n                Header: \"Party\",\n                accessor: \"Record.Description\",\n                style:{\n                    textAlign: \"center\"  \n                },\n                filterable: false\n            },\n            {\n                Header: \"Age\",\n                accessor: \"Record.Age\",\n                style:{\n                    textAlign: \"center\"  \n                },\n                filterable: false,\n            }\n        ]\n        \n        return (\n            <div>\n                <ReactTable\n                    className=\"-striped -highlight\"\n                    defaultPageSize={5}\n                    minRows={1}\n                    columns={columns}\n                    data={this.state.candidates}\n                >\n                </ReactTable>\n                <CSVReader\n                    cssInputClass=\"btn btn-primary\"\n                    label=\"Select CSV with secret Death Star statistics\"\n                    onFileLoaded={this.handleForce}\n                />\n                <Button variant=\"success\" onClick={this.handleOnClickVote}>Vote</Button>\n                { this.state.isFinish &&\n                    <CSVLink data={this.state.random}>Download your rand key.</CSVLink>\n                }\n                <NotificationContainer/>\n            </div>\n            \n        );\n    }\n}\n\nexport default Candidates;\n"]},"metadata":{},"sourceType":"module"}