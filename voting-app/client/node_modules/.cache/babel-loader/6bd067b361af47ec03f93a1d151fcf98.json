{"ast":null,"code":"import _slicedToArray from \"/home/tomas/Voting app (2)/voting-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/tomas/Voting app (2)/voting-app/client/src/components/candidates/candidates.js\";\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable react/no-direct-mutation-state */\n\n/* eslint-disable no-undef */\n\n/* eslint-disable no-unused-expressions */\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ReactTable from 'react-table';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport { confirm } from \"../confirmation/confirmation\";\nimport axios from 'axios';\nimport { CSVLink } from \"react-csv\";\nimport 'react-table/react-table.css';\nimport 'react-notifications/lib/notifications.css';\nimport FileReader from '../fileReader/fileReader';\nimport InputID from '../inputID/inputID';\n\nconst _require = require('paillier-in-set-zkp'),\n      encryptWithProof = _require.encryptWithProof;\n\nconst paillier = require('paillier-js');\n\nvar bigInt = require(\"big-integer\");\n\nclass Candidates extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnClickVote = () => {\n      if (this.state.vote == null) {\n        NotificationManager.error('Choose one candidate!', 'Your vote is empty');\n        return;\n      }\n\n      confirm('Are you sure vote - ' + this.state.voteName + '?').then(() => {\n        console.log(this.output);\n        var validScores = this.state.candidates.map(function (obj) {\n          return obj.Record.Vote;\n        });\n        console.log(validScores);\n        console.time('encrypt');\n        const publicKey = new paillier.PublicKey(bigInt(this.state.pubKey.n), this.state.pubKey.g);\n\n        const _encryptWithProof = encryptWithProof(publicKey, this.state.vote, validScores, this.state.bits),\n              _encryptWithProof2 = _slicedToArray(_encryptWithProof, 3),\n              cipher = _encryptWithProof2[0],\n              proof = _encryptWithProof2[1],\n              random = _encryptWithProof2[2];\n\n        console.log(\"Cipher: \" + cipher);\n        console.log(\"Proof:\" + proof);\n        console.log(\"Random:\" + random);\n        this.setState({\n          random: random.toString()\n        });\n        this.state.random = random.toString();\n        console.timeEnd('encrypt');\n        var vote = {\n          id: '2',\n          Vote: parseInt(this.state.vote),\n          Cipher: cipher,\n          Proof: proof\n        };\n        console.log(this.state.voteName);\n        axios.post('/voting-app/vote', vote).then(response => {\n          console.log(response);\n        }).catch(error => {\n          console.log(error);\n          NotificationManager.error('Your vote is not counted :-(', 'ERROR!');\n        });\n        this.setState({\n          isFinish: true\n        });\n        NotificationManager.success('Your vote is counted :-)', 'SUCCESS!');\n      });\n    };\n\n    this.handleForce = data => {\n      console.log(data);\n    };\n\n    this.handleForce2 = data => {\n      console.log(data);\n    };\n\n    this.addFile = event => {\n      console.log(event.target.files[0]);\n    };\n\n    this.state = {\n      pubKey: [],\n      candidates: [],\n      vote: null,\n      voteName: '',\n      bits: null,\n      random: '',\n      isFinish: false\n    };\n    this.handleOnClickVote = this.handleOnClickVote.bind(this);\n    this.output = this.output.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('/voting-app/candidates/', {\n      method: \"GET\"\n    }).then(res => res.json()).then(candidates => this.setState({\n      candidates\n    }, () => console.log('Candidates fetched..', candidates)));\n    fetch('/voting-app/getPubKey/', {\n      method: \"GET\"\n    }).then(res => res.json()).then(pubKey => this.setState({\n      pubKey\n    }, () => console.log('Public Key fetched..', pubKey)));\n    fetch('/voting-app/getBits/', {\n      method: \"GET\"\n    }).then(res => res.json()).then(bits => this.setState({\n      bits\n    }, () => console.log('Number of bits fetched..', bits)));\n  }\n\n  render() {\n    const columns = [{\n      Header: \"Vote\",\n      style: {\n        textAlign: \"center\"\n      },\n      Cell: props => {\n        return React.createElement(\"div\", {\n          class: \"radio\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"radio\",\n          name: \"optradio\",\n          onClick: () => {\n            this.state.vote = props.original.Record.Vote;\n            this.state.voteName = props.original.Record.Name;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        })));\n      },\n      sortable: false,\n      width: 75,\n      maxWidth: 75,\n      minWidth: 75\n    }, {\n      Header: \"ID\",\n      accessor: \"Record.ID\",\n      style: {\n        textAlign: \"center\"\n      },\n      width: 75,\n      maxWidth: 75,\n      minWidth: 75\n    }, {\n      Header: \"Name\",\n      accessor: \"Record.Name\",\n      style: {\n        textAlign: \"center\"\n      }\n    }, {\n      Header: \"Party\",\n      accessor: \"Record.Description\",\n      style: {\n        textAlign: \"center\"\n      },\n      filterable: false\n    }, {\n      Header: \"Age\",\n      accessor: \"Record.Age\",\n      style: {\n        textAlign: \"center\"\n      },\n      filterable: false\n    }];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(InputID, {\n      func: this.output,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), React.createElement(ReactTable, {\n      className: \"-striped -highlight\",\n      defaultPageSize: 5,\n      minRows: 1,\n      columns: columns,\n      data: this.state.candidates,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"success\",\n      onClick: this.handleOnClickVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Vote\"), this.state.isFinish && React.createElement(CSVLink, {\n      data: this.state.random,\n      filename: \"my-file.csv\",\n      className: \"btn btn-info\",\n      target: \"_blank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Download me\"), this.state.isFinish && React.createElement(FileReader, {\n      onFileLoaded: this.handleForce,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Candidates;","map":{"version":3,"sources":["/home/tomas/Voting app (2)/voting-app/client/src/components/candidates/candidates.js"],"names":["React","Component","Button","ReactTable","NotificationContainer","NotificationManager","confirm","axios","CSVLink","FileReader","InputID","require","encryptWithProof","paillier","bigInt","Candidates","constructor","props","handleOnClickVote","state","vote","error","voteName","then","console","log","output","validScores","candidates","map","obj","Record","Vote","time","publicKey","PublicKey","pubKey","n","g","bits","cipher","proof","random","setState","toString","timeEnd","id","parseInt","Cipher","Proof","post","response","catch","isFinish","success","handleForce","data","handleForce2","addFile","event","target","files","bind","componentDidMount","fetch","method","res","json","render","columns","Header","style","textAlign","Cell","original","Name","sortable","width","maxWidth","minWidth","accessor","filterable"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable react/no-direct-mutation-state */\n/* eslint-disable no-undef */\n/* eslint-disable no-unused-expressions */\nimport React, {Component} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ReactTable from 'react-table';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\nimport {confirm} from \"../confirmation/confirmation\";\nimport axios from 'axios';\nimport {CSVLink} from \"react-csv\";\nimport 'react-table/react-table.css';\nimport 'react-notifications/lib/notifications.css';\nimport FileReader from '../fileReader/fileReader';\nimport InputID from '../inputID/inputID'\n\nconst { encryptWithProof} = require('paillier-in-set-zkp')\nconst paillier = require('paillier-js')\nvar bigInt = require(\"big-integer\");\n\nclass Candidates extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            pubKey: [],\n            candidates: [],\n            vote: null,\n            voteName: '',\n            bits: null,\n            random: '',\n            isFinish: false,\n        }\n        this.handleOnClickVote = this.handleOnClickVote.bind(this);\n        this.output = this.output.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('/voting-app/candidates/',{\n            method: \"GET\"})\n            .then(res => res.json())\n            .then(candidates => this.setState({candidates}, () => console.log('Candidates fetched..',\n            candidates)));\n        fetch('/voting-app/getPubKey/',{\n            method: \"GET\"})\n            .then(res => res.json())\n            .then(pubKey => this.setState({pubKey}, () => console.log('Public Key fetched..',\n            pubKey)));\n        fetch('/voting-app/getBits/',{\n            method: \"GET\"})\n            .then(res => res.json())\n            .then(bits => this.setState({bits}, () => console.log('Number of bits fetched..',\n            bits)));\n        \n    }\n\n    handleOnClickVote = () => {\n        \n        if(this.state.vote == null){\n            NotificationManager.error('Choose one candidate!', 'Your vote is empty');\n            return;\n        }\n\n        confirm('Are you sure vote - ' + this.state.voteName + '?').then(\n            () => {\n                console.log(this.output);\n                var validScores = this.state.candidates.map(function (obj) {\n                    return obj.Record.Vote;\n                });\n                console.log(validScores);\n                console.time('encrypt');\n        \n                const publicKey = new paillier.PublicKey(bigInt(this.state.pubKey.n), this.state.pubKey.g);\n                \n                const [cipher, proof, random] = encryptWithProof(publicKey, this.state.vote, validScores, this.state.bits);\n                console.log(\"Cipher: \" + cipher);\n                console.log(\"Proof:\" + proof);\n                console.log(\"Random:\" + random);\n                this.setState({random: random.toString()});\n                this.state.random = random.toString();\n                console.timeEnd('encrypt');\n                var vote = {\n                    id: '2',\n                    Vote: parseInt(this.state.vote),\n                    Cipher: cipher,\n                    Proof: proof \n                }\n                console.log(this.state.voteName);\n        \n                axios.post('/voting-app/vote', vote)\n                    .then(response => {\n                        console.log(response);\n                    })\n                    .catch(error => {\n                        console.log(error);\n                        NotificationManager.error('Your vote is not counted :-(', 'ERROR!');\n                    })\n                this.setState({isFinish: true});\n                NotificationManager.success('Your vote is counted :-)', 'SUCCESS!');\n            }\n          );\n    }\n\n    handleForce = data => {\n        console.log(data);\n    };\n    handleForce2 = data => {\n        console.log(data);\n    };\n    addFile = event => {\n        console.log(event.target.files[0]);\n    }\n\n    render(){\n        const columns = [\n            {\n                Header: \"Vote\",\n                style:{\n                    textAlign: \"center\"\n                },\n                Cell: props =>{\n                    return(\n                        <div class=\"radio\">\n                            <label><input type=\"radio\" name=\"optradio\"\n                                onClick={() =>{\n                                    this.state.vote = props.original.Record.Vote;\n                                    this.state.voteName = props.original.Record.Name;\n                                }}\n                            /></label>\n                        </div>\n                    )\n                },\n                sortable: false,\n                width: 75,\n                maxWidth:75,\n                minWidth:75\n            },\n            {\n                Header: \"ID\",\n                accessor: \"Record.ID\",\n                style:{\n                    textAlign: \"center\"  \n                },\n                width: 75,\n                maxWidth: 75,\n                minWidth: 75\n            },\n            {\n                Header: \"Name\",\n                accessor: \"Record.Name\",\n                style:{\n                    textAlign: \"center\"  \n                }\n                \n            },\n            {\n                Header: \"Party\",\n                accessor: \"Record.Description\",\n                style:{\n                    textAlign: \"center\"  \n                },\n                filterable: false\n            },\n            {\n                Header: \"Age\",\n                accessor: \"Record.Age\",\n                style:{\n                    textAlign: \"center\"  \n                },\n                filterable: false,\n            }\n        ]\n        \n        return (\n            <div>\n                <InputID func={this.output}/>\n                <ReactTable\n                    className=\"-striped -highlight\"\n                    defaultPageSize={5}\n                    minRows={1}\n                    columns={columns}\n                    data={this.state.candidates}\n                >\n                </ReactTable>\n                <Button variant=\"success\" onClick={this.handleOnClickVote}>Vote</Button>\n                {this.state.isFinish &&\n                    <CSVLink\n                    data={this.state.random}\n                    filename={\"my-file.csv\"}\n                    className=\"btn btn-info\"\n                    target=\"_blank\"\n                  >\n                    Download me\n                  </CSVLink>\n                }\n                {this.state.isFinish &&\n                <FileReader onFileLoaded={this.handleForce}/>\n                }\n                <NotificationContainer/>\n            </div>\n            \n        );\n    }\n}\n\nexport default Candidates;\n"]},"metadata":{},"sourceType":"module"}