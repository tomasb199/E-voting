{"ast":null,"code":"import _slicedToArray from \"/home/tomas/Voting app (2)/voting-app/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/tomas/Voting app (2)/voting-app/client/src/components/candidates/candidates.js\";\n\n/* eslint-disable no-unused-vars */\n\n/* eslint-disable react/no-direct-mutation-state */\n\n/* eslint-disable no-undef */\n\n/* eslint-disable no-unused-expressions */\nimport React, { Component } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ReactTable from 'react-table';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport { confirm } from \"../confirmation/confirmation\";\nimport axios from 'axios';\nimport 'react-table/react-table.css';\nimport 'react-notifications/lib/notifications.css';\nimport './candidates.css';\n\nconst _require = require('paillier-in-set-zkp'),\n      encryptWithProof = _require.encryptWithProof,\n      verifyProof = _require.verifyProof;\n\nconst paillier = require('paillier-js');\n\nvar bigInt = require(\"big-integer\");\n\nclass Candidates extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      alert('Your username is: ' + this.input.value);\n    };\n\n    this.handleOnClickVote = () => {\n      if (this.state.vote == null) {\n        NotificationManager.error('Choose one candidate!', 'Your vote is empty');\n        return;\n      }\n\n      var validScores = this.state.candidates.map(function (obj) {\n        return obj.Record.Vote;\n      });\n      console.log(validScores);\n      console.time('encrypt');\n      const publicKey = new paillier.PublicKey(bigInt(this.state.pubKey.n), this.state.pubKey.g);\n\n      const _encryptWithProof = encryptWithProof(publicKey, this.state.vote, validScores, this.state.bits),\n            _encryptWithProof2 = _slicedToArray(_encryptWithProof, 3),\n            cipher = _encryptWithProof2[0],\n            proof = _encryptWithProof2[1],\n            random = _encryptWithProof2[2];\n\n      console.log(\"Cipher: \" + cipher);\n      console.log(\"Proof:\" + proof); //console.log(\"Random:\" + random);\n\n      this.setState({\n        random: random.toString()\n      });\n      this.state.random = random.toString();\n      console.timeEnd('encrypt');\n      var vote = {\n        id: '1',\n        Vote: parseInt(this.state.vote)\n      };\n      console.log(this.state.voteName);\n      axios.post('/voting-app/vote', vote).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n        NotificationManager.error('Your vote is not counted :-(', 'ERROR!');\n      });\n      this.setState({\n        isFinish: true\n      });\n      confirm(\"Are you sure?\").then(() => {\n        NotificationManager.success('Your vote is counted :-)', 'SUCCESS!');\n      }, () => {\n        this.setState({\n          message: \"cancel!\"\n        });\n      });\n    };\n\n    this.state = {\n      pubKey: [],\n      candidates: [],\n      vote: null,\n      voteName: '',\n      bits: null,\n      random: '',\n      isFinish: false\n    };\n    this.handleOnClickVote = this.handleOnClickVote.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('/voting-app/candidates/', {\n      method: \"GET\"\n    }).then(res => res.json()).then(candidates => this.setState({\n      candidates\n    }, () => console.log('Candidates fetched..', candidates)));\n    fetch('/voting-app/getPubKey/', {\n      method: \"GET\"\n    }).then(res => res.json()).then(pubKey => this.setState({\n      pubKey\n    }, () => console.log('Public Key fetched..', pubKey)));\n    fetch('/voting-app/getBits/', {\n      method: \"GET\"\n    }).then(res => res.json()).then(bits => this.setState({\n      bits\n    }, () => console.log('Number of bits fetched..', bits)));\n  }\n\n  render() {\n    const columns = [{\n      Header: \"Vote\",\n      style: {\n        textAlign: \"center\"\n      },\n      Cell: props => {\n        return React.createElement(\"div\", {\n          class: \"radio\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"radio\",\n          name: \"optradio\",\n          onClick: () => {\n            this.state.vote = props.original.Record.Vote;\n            this.state.voteName = props.original.Record.Name;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        })));\n      },\n      sortable: false,\n      width: 100,\n      maxWidth: 100,\n      minWidth: 100\n    }, {\n      Header: \"ID\",\n      accessor: \"Record.ID\",\n      style: {\n        textAlign: \"center\"\n      },\n      width: 75,\n      maxWidth: 75,\n      minWidth: 75\n    }, {\n      Header: \"Name\",\n      accessor: \"Record.Name\",\n      style: {\n        textAlign: \"center\"\n      }\n    }, {\n      Header: \"Party\",\n      accessor: \"Record.Description\",\n      style: {\n        textAlign: \"center\"\n      },\n      filterable: false\n    }, {\n      Header: \"Age\",\n      accessor: \"Record.Age\",\n      style: {\n        textAlign: \"center\"\n      },\n      filterable: false\n    }];\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(ReactTable, {\n      className: \"-striped -highlight\",\n      defaultPageSize: 5,\n      minRows: 1,\n      columns: columns,\n      data: this.state.candidates,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"success\",\n      onClick: this.handleOnClickVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Vote\"), this.state.isFinish && React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, this.state.random), React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Candidates;","map":{"version":3,"sources":["/home/tomas/Voting app (2)/voting-app/client/src/components/candidates/candidates.js"],"names":["React","Component","Button","ReactTable","NotificationContainer","NotificationManager","confirm","axios","require","encryptWithProof","verifyProof","paillier","bigInt","Candidates","constructor","props","handleSubmit","event","preventDefault","alert","input","value","handleOnClickVote","state","vote","error","validScores","candidates","map","obj","Record","Vote","console","log","time","publicKey","PublicKey","pubKey","n","g","bits","cipher","proof","random","setState","toString","timeEnd","id","parseInt","voteName","post","then","response","catch","isFinish","success","message","bind","componentDidMount","fetch","method","res","json","render","columns","Header","style","textAlign","Cell","original","Name","sortable","width","maxWidth","minWidth","accessor","filterable"],"mappings":"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","sourcesContent":["/* eslint-disable no-unused-vars */\n/* eslint-disable react/no-direct-mutation-state */\n/* eslint-disable no-undef */\n/* eslint-disable no-unused-expressions */\nimport React, {Component} from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ReactTable from 'react-table';\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\nimport { confirm } from \"../confirmation/confirmation\";\nimport axios from 'axios';\nimport 'react-table/react-table.css'\nimport 'react-notifications/lib/notifications.css';\nimport './candidates.css';\n\nconst { encryptWithProof, verifyProof } = require('paillier-in-set-zkp')\nconst paillier = require('paillier-js')\nvar bigInt = require(\"big-integer\");\n\nclass Candidates extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            pubKey: [],\n            candidates: [],\n            vote: null,\n            voteName: '',\n            bits: null,\n            random: '',\n            isFinish: false,\n        }\n        this.handleOnClickVote = this.handleOnClickVote.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        fetch('/voting-app/candidates/',{\n            method: \"GET\"})\n            .then(res => res.json())\n            .then(candidates => this.setState({candidates}, () => console.log('Candidates fetched..',\n            candidates)));\n        fetch('/voting-app/getPubKey/',{\n            method: \"GET\"})\n            .then(res => res.json())\n            .then(pubKey => this.setState({pubKey}, () => console.log('Public Key fetched..',\n            pubKey)));\n        fetch('/voting-app/getBits/',{\n            method: \"GET\"})\n            .then(res => res.json())\n            .then(bits => this.setState({bits}, () => console.log('Number of bits fetched..',\n            bits)));\n        \n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        alert('Your username is: ' + this.input.value);\n    };\n\n    handleOnClickVote = () => {\n        if(this.state.vote == null){\n            NotificationManager.error('Choose one candidate!', 'Your vote is empty');\n            return;\n        }\n        var validScores = this.state.candidates.map(function (obj) {\n            return obj.Record.Vote;\n        });\n        console.log(validScores);\n        console.time('encrypt');\n\n        const publicKey = new paillier.PublicKey(bigInt(this.state.pubKey.n), this.state.pubKey.g);\n        \n        const [cipher, proof, random] = encryptWithProof(publicKey, this.state.vote, validScores, this.state.bits);\n        console.log(\"Cipher: \" + cipher);\n        console.log(\"Proof:\" + proof);\n        //console.log(\"Random:\" + random);\n        this.setState({random: random.toString()});\n        this.state.random = random.toString();\n        console.timeEnd('encrypt');\n        var vote = {\n            id: '1',\n            Vote: parseInt(this.state.vote)\n        }\n        console.log(this.state.voteName);\n\n        axios.post('/voting-app/vote', vote)\n            .then(response => {\n                console.log(response);\n            })\n            .catch(error => {\n                console.log(error);\n                NotificationManager.error('Your vote is not counted :-(', 'ERROR!');\n            })\n        this.setState({isFinish: true});\n        confirm(\"Are you sure?\").then(\n            () => {\n                NotificationManager.success('Your vote is counted :-)', 'SUCCESS!');\n            },\n            () => {\n              this.setState({\n                message: \"cancel!\"\n              });\n            }\n          );\n    }\n\n    render(){\n        const columns = [\n            {\n                Header: \"Vote\",\n                style:{\n                      textAlign: \"center\"  \n                },\n                Cell: props =>{\n                    return(\n                        <div class=\"radio\">\n                            <label><input type=\"radio\" name=\"optradio\"\n                                onClick={() =>{\n                                    this.state.vote = props.original.Record.Vote;\n                                    this.state.voteName = props.original.Record.Name;\n                                }}\n                            /></label>\n                        </div>\n                    )\n                },\n                sortable: false,\n                width: 100,\n                maxWidth:100,\n                minWidth:100\n            },\n            {\n                Header: \"ID\",\n                accessor: \"Record.ID\",\n                style:{\n                      textAlign: \"center\"  \n                },\n                width: 75,\n                maxWidth: 75,\n                minWidth: 75\n            },\n            {\n                Header: \"Name\",\n                accessor: \"Record.Name\",\n                style:{\n                    textAlign: \"center\"  \n                }\n                \n            },\n            {\n                Header: \"Party\",\n                accessor: \"Record.Description\",\n                style:{\n                    textAlign: \"center\"  \n                },\n                filterable: false\n            },\n            {\n                Header: \"Age\",\n                accessor: \"Record.Age\",\n                style:{\n                    textAlign: \"center\"  \n                },\n                filterable: false,\n            }\n        ]\n        \n        return (\n            <div>\n                <ReactTable\n                    className=\"-striped -highlight\"\n                    defaultPageSize={5}\n                    minRows={1}\n                    columns={columns}\n                    data={this.state.candidates}\n                >\n                </ReactTable>\n                \n                <Button variant=\"success\" onClick={this.handleOnClickVote}>Vote</Button>\n                { this.state.isFinish && \n                \n                <p>{this.state.random}</p>\n                \n                }\n                <NotificationContainer/>\n            </div>\n            \n        );\n    }\n}\n\nexport default Candidates;\n"]},"metadata":{},"sourceType":"module"}